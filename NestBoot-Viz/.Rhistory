network <- createCytoscapeJsNetwork(nodeData, edgeData)
rcytoscapejs(network$nodes, network$edges, layout=input$clay)
snahelper:::SNAhelperAddin()
g=graph.full(4)
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
graph(nodeData)
graph(edgeData)
graph(TLSCO[[12]])
TLSCO[[12]]
graph(TLSCO[[12]])
g=graph.full(12)
snahelper:::SNAhelperAddin()
snahelper:::SNAhelperAddin()
library(readr)
A <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/DrugBank_2_gene.tsv","\t") #universal map of gene symbol to drugbankID
A$UniProtID<-A$DrugBankID
A$DrugBankID<-NULL
B <- read_csv("~/Dropbox/SciLifeLab/git/R/proteinDB/ProteinClassDBDec5.csv") #map gene symbol to proteinID
B$UniProtID<-B$ProteinID
B$GeneName<-B$GeneNames
B$GeneNames<-NULL
B$ProteinID<-NULL
C <- read_csv("~/Dropbox/SciLifeLab/git/R/proteinDB/DrugBank_2_uniprot.csv") #uniprotID to drug name
C$UniProtID<-C$`UniProt ID`
C$`UniProt ID`<-NULL
E <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/L1000_genpert.txt","\t", escape_double = FALSE, trim_ws = TRUE) #L1000 drug to gene KD
E$GeneName<-E$`61E3.4`
E$`61E3.4`<-NULL
EE<-unique(E$GeneName)
EE<-data.frame(EE)
EE$GeneName<-EE$EE
EE$EE<-NULL
J <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/DrugBank_all_protien_ID.csv",",", escape_double = FALSE, trim_ws = TRUE)
J$UniProtID<- J$`UniProt ID`
J$`UniProt ID`<-NULL
K <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/PharmGKB_relationships.tsv","\t", escape_double = FALSE, trim_ws = TRUE)
D<-merge(A,C,by="UniProtID",all=TRUE)
D<-merge(D,B,by="UniProtID",all=TRUE)
D<-merge(D,J,by="UniProtID",all=TRUE)
D$X1<-NULL
D$GeneName.x<-NULL
D$GeneName<-D$GeneName.y
D$GeneName.y<-NULL
F<-merge(D,EE,by="GeneName",all=FALSE)
# write.table(F,"~/Dropbox/SciLifeLab/git/R/proteinDB/L1000_drug.csv",na = "",sep = ",") #contains gene symbol, uniprotID,drugbankID, drug name
n_occur <- data.frame(table(F$`DrugBank ID`))
uniqueF<-F[F$`DrugBank ID` %in% n_occur$Var1[n_occur$Freq ==1],] #2703 all unique
# write.table(uniqueF,"~/Dropbox/SciLifeLab/git/R/proteinDB/L1000_uniqueDrugP.csv",na = "",sep = ",")
Pname<-(uniqueF$GeneName)
drug_HA1E_24_Y <- read.table(file="~/drug_HA1E_24_Y.csv",row.names=1,header=TRUE,sep=",")
Z<-intersect(Pname,rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),Pname) #take only drugs with single gene target = 2700 drugs
HA1Ed<-drug_HA1E_24_Y[ZZ,]
uniqueF$Name<-uniqueF$Name.x
uniqueF$Name.x<-NULL
uniqueF$Name.y<-NULL
View(uniqueF)
uniqueF$Name<-uniqueF$Name.x
uniqueF$Name.x<-NULL
uniqueF$Name.y<-NULL
a<-data.frame(sort(uniqueF$Name))
b<-(sort(colnames(HA1Ed)))
b<-gsub("\\..*","",b)
b<-gsub("\\_.*","",b)
b<-data.frame(sort(unique(b)))
a <- apply(a,2,toupper)
b <- apply(b,2,toupper)
Q<-intersect(a,b) ## take only genes with recognizable drug anti-targets, ie find drugs with single gene targets
Z<-intersect(Pname,rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),Pname) #take only drugs with single gene target = 2700 drugs
HA1Ed<-drug_HA1E_24_Y[ZZ,]
uniqueF$Name<-uniqueF$Name.x
uniqueF$Name.x<-NULL
uniqueF$Name.y<-NULL
a<-data.frame((uniqueF$Name))
b<-((colnames(HA1Ed)))
b<-gsub("\\..*","",b)
b<-gsub("\\_.*","",b)
b<-data.frame((unique(b)))
a <- apply(a,2,toupper)
b <- apply(b,2,toupper)
Q<-intersect(a,b) ## take only genes with recognizable drug anti-targets, ie find drugs with single gene targets
View(`F`)
D<-merge(A,C,by="UniProtID",all=FALSE)
D<-merge(D,B,by="UniProtID",all=FALSE)
D<-merge(D,J,by="UniProtID",all=FALSE)
D<-merge(A,C,by="UniProtID",all=FALSE)
D<-merge(A,C,by="UniProtID")
D<-merge(D,B,by="UniProtID")
D<-merge(D,J,by="UniProtID")
D<-merge(A,C,by="UniProtID")
D<-merge(D,B,by="UniProtID")
D<-merge(D,J,by="UniProtID")
View(D)
D$X1<-NULL
D$GeneName.x<-NULL
D$GeneName<-D$GeneName.y
D$GeneName.y<-NULL
F<-merge(D,EE,by="GeneName",all=FALSE)
n_occur <- data.frame(table(F$`DrugBank ID`))
uniqueF<-F[F$`DrugBank ID` %in% n_occur$Var1[n_occur$Freq ==1],] #2703 all unique
Pname<-(uniqueF$GeneName)
drug_HA1E_24_Y <- read.table(file="~/drug_HA1E_24_Y.csv",row.names=1,header=TRUE,sep=",")
Z<-intersect(Pname,rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),Pname) #take only drugs with single gene target = 2700 drugs
HA1Ed<-drug_HA1E_24_Y[ZZ,]
L <- read_delim("~/Desktop/STITCH_9606.protein_chemical.links.v5.0.tsv","\t", escape_double = FALSE, trim_ws = TRUE)
View(L)
rm(L)
View(K)
n_occur <- data.frame(table(F$`DrugBank ID`))
uniqueF<-F[F$`DrugBank ID` %in% n_occur$Var1[n_occur$Freq ==1],] #2703 all unique
Pname<-(uniqueF$GeneName)
Z<-intersect(Pname,rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),Pname) #take only drugs with single gene target = 2700 drugs
HA1Ed<-drug_HA1E_24_Y[ZZ,]
rownames(drug_HA1E_24_Y)
Pname
unique(Pname)
Z<-intersect(unique(Pname),rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),unique(Pname)) #take only drugs with single gene target = 2700 drugs
install.packages("affy")
library(readr)
A <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/DrugBank_2_gene.tsv","\t") #universal map of gene symbol to drugbankID
A$UniProtID<-A$DrugBankID
A$DrugBankID<-NULL
B <- read_csv("~/Dropbox/SciLifeLab/git/R/proteinDB/ProteinClassDBDec5.csv") #map gene symbol to proteinID
B$UniProtID<-B$ProteinID
B$GeneName<-B$GeneNames
B$GeneNames<-NULL
B$ProteinID<-NULL
C <- read_csv("~/Dropbox/SciLifeLab/git/R/proteinDB/DrugBank_2_uniprot.csv") #uniprotID to drug name
C$UniProtID<-C$`UniProt ID`
C$`UniProt ID`<-NULL
E <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/L1000_genpert.txt","\t", escape_double = FALSE, trim_ws = TRUE) #L1000 drug to gene KD
E$GeneName<-E$`61E3.4`
E$`61E3.4`<-NULL
EE<-unique(E$GeneName)
EE<-data.frame(EE)
EE$GeneName<-EE$EE
EE$EE<-NULL
J <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/DrugBank_all_protien_ID.csv",",", escape_double = FALSE, trim_ws = TRUE)
J$UniProtID<- J$`UniProt ID`
J$`UniProt ID`<-NULL
K <- read_delim("~/Dropbox/SciLifeLab/git/R/proteinDB/PharmGKB_relationships.tsv","\t", escape_double = FALSE, trim_ws = TRUE)
# L <- read_delim("~/Desktop/STITCH_9606.protein_chemical.links.v5.0.tsv","\t", escape_double = FALSE, trim_ws = TRUE)
D<-merge(A,C,by="UniProtID")
D<-merge(D,B,by="UniProtID")
D<-merge(D,J,by="UniProtID")
D$X1<-NULL
D$GeneName.x<-NULL
D$GeneName<-D$GeneName.y
D$GeneName.y<-NULL
F<-merge(D,EE,by="GeneName",all=FALSE)
n_occur <- data.frame(table(F$`DrugBank ID`))
uniqueF<-F[F$`DrugBank ID` %in% n_occur$Var1[n_occur$Freq ==1],] #2703 all unique
Pname<-(uniqueF$GeneName)
Z<-intersect(unique(Pname),rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),unique(Pname)) #take only drugs with single gene target = 2700 drugs
HA1Ed<-drug_HA1E_24_Y[ZZ,]
uniqueF$Name<-uniqueF$Name.x
uniqueF$Name.x<-NULL
uniqueF$Name.y<-NULL
a<-data.frame(sort(uniqueF$Name))
b<-(sort(colnames(HA1Ed)))
b<-gsub("\\..*","",b)
b<-gsub("\\_.*","",b)
b<-data.frame(sort(unique(b)))
a <- apply(a,2,toupper)
b <- apply(b,2,toupper)
Q<-intersect(a,b) ## take only genes with recognizable drug anti-targets, ie find drugs with single gene targets
drug_HA1E_24_Y <- read.table(file="~/drug_HA1E_24_Y.csv",row.names=1,header=TRUE,sep=",")
Z<-intersect(unique(Pname),rownames(drug_HA1E_24_Y)) #take only genes matching L1000 list #2700 drugs
ZZ<-intersect(rownames(drug_HA1E_24_Y),unique(Pname)) #take only drugs with single gene target = 2700 drugs
HA1Ed<-drug_HA1E_24_Y[ZZ,]
uniqueF$Name<-uniqueF$Name.x
uniqueF$Name.x<-NULL
uniqueF$Name.y<-NULL
a<-data.frame(sort(uniqueF$Name))
b<-(sort(colnames(HA1Ed)))
b<-gsub("\\..*","",b)
b<-gsub("\\_.*","",b)
b<-data.frame(sort(unique(b)))
a <- apply(a,2,toupper)
b <- apply(b,2,toupper)
Q<-intersect(a,b) ## take only genes with recognizable drug anti-targets, ie find drugs with single gene targets
shiny::runApp('Dropbox/SciLifeLab/git/R/NestBoot-Viz')
View(`F`)
runApp('Dropbox/SciLifeLab/git/R/NestBoot-Viz')
runApp('Dropbox/SciLifeLab/git/R/NestBoot-Viz')
setwd("~/Dropbox/SciLifeLab/git/R/NestBoot-Viz")
load("lassoMYCsignlinkplotdata2017-02-08.rdata")
eee<-list(lassoMYCsignlinkplotdata=lassoMYCsignlinkplotdata,lscoMYCsignlinkplotdata=lscoMYCsignlinkplotdata,tlscoMYCsignlinkplotdata=tlscoMYCsignlinkplotdata)
load("lassodataMYCsign2017-11-08.rdata")
ddd<-list(lassodataMYCsign=lassodataMYCsign,lscodataMYCsign=lscodataMYCsign,tlscodataMYCsign=tlscodataMYCsign)#tlscodataMYCsign)
load("lscodataMYCsign2017-11-08.rdata")
load("tlscodataMYCsign2019-01-30.rdata")
load("lassoMYCsignlinkplotdata2017-02-08.rdata")
load("lscoMYCsignlinkplotdata2017-02-14.rdata")
load("tlscoMYCsignlinkplotdata2018-12-21.rdata")
ddd<-list(lassodataMYCsign=lassodataMYCsign,lscodataMYCsign=lscodataMYCsign,tlscodataMYCsign=tlscodataMYCsign)#tlscodataMYCsign)
eee<-list(lassoMYCsignlinkplotdata=lassoMYCsignlinkplotdata,lscoMYCsignlinkplotdata=lscoMYCsignlinkplotdata,tlscoMYCsignlinkplotdata=tlscoMYCsignlinkplotdata)
fff<-list(lassonameMYCsign=lassonameMYCsign,lsconameMYCsign=lsconameMYCsign,tlsconameMYCsign=tlsconameMYCsign)
ggg<-list(lassoMYCsignlinkcutdata=lassoMYCsignlinkcutdata,lscoMYCsignlinkcutdata=lscoMYCsignlinkcutdata,tlscoMYCsignlinkcutdata=tlscoMYCsignlinkcutdata)
wee<-paste(input$data,"MYCsignlinkplotdata",sep="")#paste("lassodataMYCsign")
input$data<-'lasso'
input<-'lasso'
input$data<-'lasso'
wee<-paste("lassoMYCsignlinkplotdata",sep="")
datum<-eee[[wee]]
data<-(datum[[19]])
zee<-paste("lassoMYCsignlinkcutdata",sep="")#paste("lassodataMYCsign")
cutoffs<-ggg[[zee]]
qee<-paste("lassonameMYCsign",sep="")#paste("lassodataMYCsign")
aa<-fff[[qee]][[19]]
data[1:(dim(data)[1]-3),11]<-(as.numeric(as.character(data[1:(dim(data)[1]-3),9]))+(max(as.numeric(as.character(data[1:(dim(data)[1]-3),6])))-max(as.numeric(as.character(data[1:(dim(data)[1]-3),9])))))
colnames(data)[colnames(data)=="V11"] <- "overlap_MYC"
data<-data.frame(data[1:(dim(data)[1]-3),c(2,7,8,6,11)])}
else{
data<-data.frame(data[1:(dim(data)[1]-3),c(2,3,4,6,5)])
colnames(data)<-c("bins","Data","shuffle","overlap","overlap_shuffle")
cutoff<-(cutoffs[[input$sparsity]])
cutoff<-data.frame(cutoffs)
colnames(cutoff)<-c("","yrange","sparsity","","","","","","","support at cross","support at cross2")
}
cutoff<-(cutoffs[[input$sparsity]])
cutoff<-data.frame(cutoffs)
cutoff<-(cutoffs[[19]])
cutoff<-data.frame(cutoffs)
long <- melt(data, id.vars = c("bins"))
long$bins<-as.numeric(long$bins)
long$value<-as.numeric(long$value)
intercept1=cutoff$support.at.cross2[2]
bb<-strsplit(aa,"_")
cc<-sapply(bb,"[[",5)
if (input$raw==FALSE){
cutoff$CUT<-cutoff$support.at.cross
dd<-substr(cc,8,nchar(cc))
gg=1010
ff=10
ccc=max(long[c(10:(dim(data)[1]),(dim(data)[1]):(((dim(data)[1])+1)*2)),]$value)
hh=(dim(data)[1])
ee=(as.numeric(dd))/100}
cutoff$CUT<-cutoff$support.at.cross
dd<-substr(cc,8,nchar(cc))
gg=1010
ff=10
ccc=max(long[c(10:(dim(data)[1]),(dim(data)[1]):(((dim(data)[1])+1)*2)),]$value)
hh=(dim(data)[1])
ee=(as.numeric(dd))/100}
ee=(as.numeric(dd))/100#}
a<-vector()
b<-vector()
for (i in 1:(dim(data)[1])){
a[i]<-trapz(long$bins[c(i:(dim(data)[1]))]/(dim(data)[1]), long$value[c(i:(dim(data)[1]))]/max(long$value[c(i:(dim(data)[1]))]))
b[i]<-trapz(long$bins[c(((hh+1)+i):(hh*2))]/(dim(data)[1]), long$value[c(((hh+1)+i):(hh*2))]/max(long$value[c(i:(dim(data)[1]))]))
}
ww<-plot_ly() %>%
add_lines(x = long$bins[c(ff:(dim(data)[1]))]/(dim(data)[1]), y = (long$value[c(ff:(dim(data)[1]))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Measured",line = list(color = 'rgb(22, 96, 167)')) %>%
add_lines(x = long$bins[c(gg:(hh*2))]/(dim(data)[1]), y = (long$value[c(gg:(hh*2))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Shuffled", line = list(color = 'rgb(205, 12, 24)'))%>%
add_lines(x = long$bins[(1+hh*3):(hh*4)]/(dim(data)[1]), y = (long$value[(1+hh*3):(hh*4)]/max(long$value[(1+hh*3):(hh*4)]))*ccc, name = "Overlap, Measured", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(55, 15, 255,0.1)'),fillcolor = list(color = 'rgba(55, 15, 255,0.01)')) %>%
add_lines(x = long$bins[(1+hh*2):(hh*3)]/(dim(data)[1]), y = (long$value[(1+hh*2):(hh*3)]/max(long$value[(1+hh*2):(hh*3)]))*ccc, name = "Overlap, Shuffled", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(207, 114, 129,0.1)'),fillcolor = list(color = 'rgba(207, 114, 129,0.01)')) %>%
# add_lines(x=c(1:(length(na.omit(b/a)))/(dim(data)[1])),y=na.omit(b/a), name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_lines(x=c(1:(dim(data)[1]))/(dim(data)[1]),y=na.locf(b/a)/3, name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_trace(x = as.numeric(ee), y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
# add_trace(x = (cutoff$CUT[1])-.02, y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
layout(margin = list(l=100, r=50, b=50, t=50, pad=0),
paper_bgcolor='rgba(0,0,0,0)',
plot_bgcolor='rgba(0,0,0,0)',
yaxis2 = ay,yaxis=list(range=c(0,1),title="Overlap",showline = FALSE,showgrid = FALSE),
xaxis = list(title="Support", y = 0.05,showline = FALSE,showgrid = FALSE),
legend = list(x = 0.1, y = -0.2,orientation = 'h')
)
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Frequency",
range = c(0, ccc),
showline = FALSE,
showgrid = FALSE
)
ww<-plot_ly() %>%
add_lines(x = long$bins[c(ff:(dim(data)[1]))]/(dim(data)[1]), y = (long$value[c(ff:(dim(data)[1]))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Measured",line = list(color = 'rgb(22, 96, 167)')) %>%
add_lines(x = long$bins[c(gg:(hh*2))]/(dim(data)[1]), y = (long$value[c(gg:(hh*2))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Shuffled", line = list(color = 'rgb(205, 12, 24)'))%>%
add_lines(x = long$bins[(1+hh*3):(hh*4)]/(dim(data)[1]), y = (long$value[(1+hh*3):(hh*4)]/max(long$value[(1+hh*3):(hh*4)]))*ccc, name = "Overlap, Measured", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(55, 15, 255,0.1)'),fillcolor = list(color = 'rgba(55, 15, 255,0.01)')) %>%
add_lines(x = long$bins[(1+hh*2):(hh*3)]/(dim(data)[1]), y = (long$value[(1+hh*2):(hh*3)]/max(long$value[(1+hh*2):(hh*3)]))*ccc, name = "Overlap, Shuffled", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(207, 114, 129,0.1)'),fillcolor = list(color = 'rgba(207, 114, 129,0.01)')) %>%
# add_lines(x=c(1:(length(na.omit(b/a)))/(dim(data)[1])),y=na.omit(b/a), name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_lines(x=c(1:(dim(data)[1]))/(dim(data)[1]),y=na.locf(b/a)/3, name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_trace(x = as.numeric(ee), y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
# add_trace(x = (cutoff$CUT[1])-.02, y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
layout(margin = list(l=100, r=50, b=50, t=50, pad=0),
paper_bgcolor='rgba(0,0,0,0)',
plot_bgcolor='rgba(0,0,0,0)',
yaxis2 = ay,yaxis=list(range=c(0,1),title="Overlap",showline = FALSE,showgrid = FALSE),
xaxis = list(title="Support", y = 0.05,showline = FALSE,showgrid = FALSE),
legend = list(x = 0.1, y = -0.2,orientation = 'h')
)
ww
runApp()
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
load("lassodataMYCsign2017-11-08.rdata")
load("lscodataMYCsign2017-11-08.rdata")
# load("tlscodataMYCsign2018-12-21.rdata")
load("tlscodataMYCsign2019-01-30.rdata")
# ### LOAD PLOT DATA ###
load("lassoMYCsignlinkplotdata2017-02-08.rdata")
load("lscoMYCsignlinkplotdata2017-02-14.rdata")
load("tlscoMYCsignlinkplotdata2018-12-21.rdata")
ddd<-list(lassodataMYCsign=lassodataMYCsign,lscodataMYCsign=lscodataMYCsign,tlscodataMYCsign=tlscodataMYCsign)#tlscodataMYCsign)
eee<-list(lassoMYCsignlinkplotdata=lassoMYCsignlinkplotdata,lscoMYCsignlinkplotdata=lscoMYCsignlinkplotdata,tlscoMYCsignlinkplotdata=tlscoMYCsignlinkplotdata)
fff<-list(lassonameMYCsign=lassonameMYCsign,lsconameMYCsign=lsconameMYCsign,tlsconameMYCsign=tlsconameMYCsign)
ggg<-list(lassoMYCsignlinkcutdata=lassoMYCsignlinkcutdata,lscoMYCsignlinkcutdata=lscoMYCsignlinkcutdata,tlscoMYCsignlinkcutdata=tlscoMYCsignlinkcutdata)
wee<-paste("lassoMYCsignlinkplotdata",sep="")#paste("lassodataMYCsign")
datum<-eee[[wee]]
data<-(datum[[input$sparsity]])
data<-(datum[[19]])
zee<-paste(input$data,"MYCsignlinkcutdata",sep="")#paste("lassodataMYCsign")
zee<-paste("lassoMYCsignlinkcutdata",sep="")#paste("lassodataMYCsign")
cutoffs<-ggg[[zee]]
qee<-paste(input$data,"nameMYCsign",sep="")#paste("lassodataMYCsign")
qee<-paste("lassonameMYCsign",sep="")#paste("lassodataMYCsign")
aa<-fff[[qee]][[input$sparsity]]
aa<-fff[[qee]][[19]]
data[1:(dim(data)[1]-3),11]<-(as.numeric(as.character(data[1:(dim(data)[1]-3),9]))+(max(as.numeric(as.character(data[1:(dim(data)[1]-3),6])))-max(as.numeric(as.character(data[1:(dim(data)[1]-3),9])))))
colnames(data)[colnames(data)=="V11"] <- "overlap_MYC"
data<-data.frame(data[1:(dim(data)[1]-3),c(2,7,8,6,11)])}
data<-data.frame(data[1:(dim(data)[1]-3),c(2,7,8,6,11)])
cutoff<-(cutoffs[[input$sparsity]])
cutoff<-data.frame(cutoffs)
long <- melt(data, id.vars = c("bins"))
long$bins<-as.numeric(long$bins)
long$value<-as.numeric(long$value)
intercept1=cutoff$support.at.cross2[2]
cutoff<-(cutoffs[[input$sparsity]])
cutoff<-(cutoffs[[19]])
cutoff<-data.frame(cutoffs)
long <- melt(data, id.vars = c("bins"))
long$bins<-as.numeric(long$bins)
long$value<-as.numeric(long$value)
intercept1=cutoff$support.at.cross2[2]
bb<-strsplit(aa,"_")
cc<-sapply(bb,"[[",5)
cutoff$CUT<-cutoff$support.at.cross
dd<-substr(cc,8,nchar(cc))
gg=1010
ff=10
ccc=max(long[c(10:(dim(data)[1]),(dim(data)[1]):(((dim(data)[1])+1)*2)),]$value)
hh=(dim(data)[1])
ee=(as.numeric(dd))/100
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Frequency",
range = c(0, ccc),
showline = FALSE,
showgrid = FALSE
)
a<-vector()
b<-vector()
for (i in 1:(dim(data)[1])){
a[i]<-trapz(long$bins[c(i:(dim(data)[1]))]/(dim(data)[1]), long$value[c(i:(dim(data)[1]))]/max(long$value[c(i:(dim(data)[1]))]))
b[i]<-trapz(long$bins[c(((hh+1)+i):(hh*2))]/(dim(data)[1]), long$value[c(((hh+1)+i):(hh*2))]/max(long$value[c(i:(dim(data)[1]))]))
}
ww<-plot_ly() %>%
add_lines(x = long$bins[c(ff:(dim(data)[1]))]/(dim(data)[1]), y = (long$value[c(ff:(dim(data)[1]))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Measured",line = list(color = 'rgb(22, 96, 167)')) %>%
add_lines(x = long$bins[c(gg:(hh*2))]/(dim(data)[1]), y = (long$value[c(gg:(hh*2))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Shuffled", line = list(color = 'rgb(205, 12, 24)'))%>%
add_lines(x = long$bins[(1+hh*3):(hh*4)]/(dim(data)[1]), y = (long$value[(1+hh*3):(hh*4)]/max(long$value[(1+hh*3):(hh*4)]))*ccc, name = "Overlap, Measured", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(55, 15, 255,0.1)'),fillcolor = list(color = 'rgba(55, 15, 255,0.01)')) %>%
add_lines(x = long$bins[(1+hh*2):(hh*3)]/(dim(data)[1]), y = (long$value[(1+hh*2):(hh*3)]/max(long$value[(1+hh*2):(hh*3)]))*ccc, name = "Overlap, Shuffled", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(207, 114, 129,0.1)'),fillcolor = list(color = 'rgba(207, 114, 129,0.01)')) %>%
# add_lines(x=c(1:(length(na.omit(b/a)))/(dim(data)[1])),y=na.omit(b/a), name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_lines(x=c(1:(dim(data)[1]))/(dim(data)[1]),y=na.locf(b/a)/3, name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_trace(x = as.numeric(ee), y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
# add_trace(x = (cutoff$CUT[1])-.02, y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
layout(margin = list(l=100, r=50, b=50, t=50, pad=0),
paper_bgcolor='rgba(0,0,0,0)',
plot_bgcolor='rgba(0,0,0,0)',
yaxis2 = ay,yaxis=list(range=c(0,1),title="Overlap",showline = FALSE,showgrid = FALSE),
xaxis = list(title="Support", y = 0.05,showline = FALSE,showgrid = FALSE),
legend = list(x = 0.1, y = -0.2,orientation = 'h')
)
ww
data<-data.frame(data[1:(dim(data)[1]-3),c(2,3,4,6,5)])
data[1:(dim(data)[1]-3),11]<-(as.numeric(as.character(data[1:(dim(data)[1]-3),9]))+(max(as.numeric(as.character(data[1:(dim(data)[1]-3),6])))-max(as.numeric(as.character(data[1:(dim(data)[1]-3),9])))))
colnames(data)[colnames(data)=="V11"] <- "overlap_MYC"
data<-data.frame(data[1:(dim(data)[1]-3),c(2,3,4,6,5)])
wee<-paste("lassoMYCsignlinkplotdata",sep="")#paste("lassodataMYCsign")
datum<-eee[[wee]]
data<-(datum[[input$sparsity]])
data<-(datum[[19]])
zee<-paste(input$data,"MYCsignlinkcutdata",sep="")#paste("lassodataMYCsign")
zee<-paste("lassoMYCsignlinkcutdata",sep="")#paste("lassodataMYCsign")
cutoffs<-ggg[[zee]]
qee<-paste(input$data,"nameMYCsign",sep="")#paste("lassodataMYCsign")
qee<-paste("lassonameMYCsign",sep="")#paste("lassodataMYCsign")
cutoffs<-ggg[[zee]]
aa<-fff[[qee]][[input$sparsity]]
aa<-fff[[qee]][[19]]
data[1:(dim(data)[1]-3),11]<-(as.numeric(as.character(data[1:(dim(data)[1]-3),9]))+(max(as.numeric(as.character(data[1:(dim(data)[1]-3),6])))-max(as.numeric(as.character(data[1:(dim(data)[1]-3),9])))))
colnames(data)[colnames(data)=="V11"] <- "overlap_MYC"
data<-data.frame(data[1:(dim(data)[1]-3),c(2,3,4,6,5)])
cutoff<-(cutoffs[[input$sparsity]])
cutoff<-(cutoffs[[19]])
cutoff<-data.frame(cutoffs)
long <- melt(data, id.vars = c("bins"))
long$bins<-as.numeric(long$bins)
long$value<-as.numeric(long$value)
intercept1=cutoff$support.at.cross2[2]
bb<-strsplit(aa,"_")
cc<-sapply(bb,"[[",5)
if (input$raw==FALSE){
cutoff$CUT<-cutoff$support.at.cross
dd<-substr(cc,8,nchar(cc))
gg=1010
ff=10
ccc=max(long[c(10:(dim(data)[1]),(dim(data)[1]):(((dim(data)[1])+1)*2)),]$value)
hh=(dim(data)[1])
ee=(as.numeric(dd))/100
# else if(identical(input$data, "BSUB")){
#   cutoff$CUT<-(cutoff$support.at.cross)*10
#   ccc=max(long[c(1:(dim(data)[1]),(dim(data)[1]+1):(((dim(data)[1])+1)*2)),]$value)
#
#   ff=1
#   hh=(dim(data)[1])
#   gg=(dim(data)[1])+1
#   dd<-substr(cc,8,nchar(cc))
#   ee=as.numeric(dd)/100
# }
}else{
cutoff$CUT<-(cutoff$support.at.cross)*10
ccc=max(long[c(1:(dim(data)[1]),(dim(data)[1]+1):(((dim(data)[1])+1)*2)),]$value)
ff=1
hh=(dim(data)[1])
gg=(dim(data)[1])+1
dd<-substr(cc,5,nchar(cc))
# ee=as.numeric(dd)/10
ee=as.numeric(cutoff$CUT)
}
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Frequency",
range = c(0, ccc),
showline = FALSE,
showgrid = FALSE
)
a<-vector()
b<-vector()
for (i in 1:(dim(data)[1])){
a[i]<-trapz(long$bins[c(i:(dim(data)[1]))]/(dim(data)[1]), long$value[c(i:(dim(data)[1]))]/max(long$value[c(i:(dim(data)[1]))]))
b[i]<-trapz(long$bins[c(((hh+1)+i):(hh*2))]/(dim(data)[1]), long$value[c(((hh+1)+i):(hh*2))]/max(long$value[c(i:(dim(data)[1]))]))
}
ww<-plot_ly() %>%
add_lines(x = long$bins[c(ff:(dim(data)[1]))]/(dim(data)[1]), y = (long$value[c(ff:(dim(data)[1]))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Measured",line = list(color = 'rgb(22, 96, 167)')) %>%
add_lines(x = long$bins[c(gg:(hh*2))]/(dim(data)[1]), y = (long$value[c(gg:(hh*2))]/max(long$value[c(ff:(dim(data)[1]))])), name = "Shuffled", line = list(color = 'rgb(205, 12, 24)'))%>%
add_lines(x = long$bins[(1+hh*3):(hh*4)]/(dim(data)[1]), y = (long$value[(1+hh*3):(hh*4)]/max(long$value[(1+hh*3):(hh*4)]))*ccc, name = "Overlap, Measured", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(55, 15, 255,0.1)'),fillcolor = list(color = 'rgba(55, 15, 255,0.01)')) %>%
add_lines(x = long$bins[(1+hh*2):(hh*3)]/(dim(data)[1]), y = (long$value[(1+hh*2):(hh*3)]/max(long$value[(1+hh*2):(hh*3)]))*ccc, name = "Overlap, Shuffled", yaxis = "y2",fill = 'tozeroy',line = list(color = 'rgba(207, 114, 129,0.1)'),fillcolor = list(color = 'rgba(207, 114, 129,0.01)')) %>%
# add_lines(x=c(1:(length(na.omit(b/a)))/(dim(data)[1])),y=na.omit(b/a), name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_lines(x=c(1:(dim(data)[1]))/(dim(data)[1]),y=na.locf(b/a)/3, name = "FDR",line = list(color = 'grey',dash = "dash")) %>%
add_trace(x = as.numeric(ee), y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
# add_trace(x = (cutoff$CUT[1])-.02, y = c(0,1),line = list(dash = "dash",color = "orange"),type='scatter',mode='lines',name="support at cutoff") %>%
layout(margin = list(l=100, r=50, b=50, t=50, pad=0),
paper_bgcolor='rgba(0,0,0,0)',
plot_bgcolor='rgba(0,0,0,0)',
yaxis2 = ay,yaxis=list(range=c(0,1),title="Overlap",showline = FALSE,showgrid = FALSE),
xaxis = list(title="Support", y = 0.05,showline = FALSE,showgrid = FALSE),
legend = list(x = 0.1, y = -0.2,orientation = 'h')
)
ww
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
load("tlscodataMYCsign2019-01-30.rdata")
load("tlscoMYCsignlinkplotdata2018-12-21.rdata")
tlscodataMYCsign[16]
tlscodataMYCsign[17]<-tlscodataMYCsign[1]
tlscodataMYCsign[18]<-tlscodataMYCsign[2]
tlscodataMYCsign[19]<-tlscodataMYCsign[3]
tlscodataMYCsign[20]<-tlscodataMYCsign[4]
tlscodataMYCsign[21]<-tlscodataMYCsign[5]
tlscodataMYCsign[22]<-tlscodataMYCsign[6]
tlscodataMYCsign[17]<-tlscodataMYCsign[1]
tlscodataMYCsign[17:30]<-tlscodataMYCsign[1]
tlsconameMYCsign[17:30]<-tlsconameMYCsign[1]
tlsconameMYCsign[17:35]<-tlsconameMYCsign[1]
tlscodataMYCsign[17:35]<-tlscodataMYCsign[1]
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
file<-paste("~/Dropbox/SciLifeLab/git/R/GSnetApp/tlscodataMYCsign",Sys.Date(),".rdata",sep="")
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
file<-paste("~/Dropbox/SciLifeLab/git/R/cancergrn/tlscodataMYCsign",Sys.Date(),".rdata",sep="")
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
file<-paste("~/Dropbox/SciLifeLab/git/R/cancerGRN/tlscodataMYCsign",Sys.Date(),".rdata",sep="")
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
file<-paste("~/Dropbox/SciLifeLab/git/R/cancerGRN/tlscoMYCsignlinkplotdata",Sys.Date(),".rdata",sep="")
save(tlscoMYCsignlinkplotdata,tlscoMYCsignlinkcutdata,tlscoMYCsignlinkplotname,file=file)
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
tlsconameMYCsign[17:35]<-tlsconameMYCsign[16]
tlscodataMYCsign[17:35]<-tlscodataMYCsign[16]
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
save(tlscoMYCsignlinkplotdata,tlscoMYCsignlinkcutdata,tlscoMYCsignlinkplotname,file=file)
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
save(tlscoMYCsignlinkplotdata,tlscoMYCsignlinkcutdata,tlscoMYCsignlinkplotname,file=file)
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
file<-paste("~/Dropbox/SciLifeLab/git/R/cancerGRN/tlscodataMYCsign",Sys.Date(),".rdata",sep="")
save(tlscodataMYCsign,tlsconameMYCsign,file=file)
file<-paste("~/Dropbox/SciLifeLab/git/R/cancerGRN/tlscoMYCsignlinkplotdata",Sys.Date(),".rdata",sep="")
save(tlscoMYCsignlinkplotdata,tlscoMYCsignlinkcutdata,tlscoMYCsignlinkplotname,file=file)
runApp('~/Dropbox/SciLifeLab/git/R/cancerGRN')
